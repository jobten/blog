{"version":3,"file":"pages/uc.js","sources":["webpack:///./pages/uc.vue?44ee","webpack:///./pages/uc.vue?c6fc","webpack:///./pages/uc.vue?de24","webpack:///./pages/uc.vue?2381","webpack:///./pages/uc.vue","webpack:///./pages/uc.vue?32ca","webpack:///./pages/uc.vue?d5ce"],"sourcesContent":["// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../node_modules/stylus-loader/index.js??ref--8-oneOf-1-3!../node_modules/vue-loader/lib/index.js??vue-loader-options!./uc.vue?vue&type=style&index=0&lang=stylus&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add CSS to SSR context\nvar add = require(\"!../node_modules/vue-style-loader/lib/addStylesServer.js\").default\nmodule.exports.__inject__ = function (context) {\n  add(\"041bdd28\", content, true, context)\n};","export * from \"-!../node_modules/vue-style-loader/index.js??ref--8-oneOf-1-0!../node_modules/css-loader/dist/cjs.js??ref--8-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../node_modules/stylus-loader/index.js??ref--8-oneOf-1-3!../node_modules/vue-loader/lib/index.js??vue-loader-options!./uc.vue?vue&type=style&index=0&lang=stylus&\"","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"#drag{height:100px;line-height:100px;border:2px dashed #eee;text-align:center}.cube-container .cube{width:14px;height:14px;line-height:12px;border:1px solid #000;background:#eee;float:left}.cube-container .cube>.success{background:green}.cube-container .cube>.uploading{background:#00f}.cube-container .cube>.error{background:red}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_vm._ssrNode(\"<h1>用户中心</h1> <i class=\\\"el-icon-loading\\\"></i> <div id=\\\"drag\\\"><input type=\\\"file\\\" name=\\\"file\\\"></div> \"),_vm._ssrNode(\"<div>\",\"</div>\",[_c('el-progress',{attrs:{\"stroke-width\":20,\"text-inside\":true,\"percentage\":_vm.uploadProgress}})],1),_vm._ssrNode(\" \"),_vm._ssrNode(\"<div>\",\"</div>\",[_c('el-button',{on:{\"click\":_vm.uploadFile}},[_vm._v(\"上传\")])],1),_vm._ssrNode(\" \"),_vm._ssrNode(\"<div>\",\"</div>\",[_vm._ssrNode(\"<p>计算hash的进度</p> \"),_c('el-progress',{attrs:{\"stroke-width\":20,\"text-inside\":true,\"percentage\":_vm.hashProgress}})],2),_vm._ssrNode(\" <div><div class=\\\"cube-container\\\"\"+(_vm._ssrStyle(null,{width:_vm.cubeWidth+'px'}, null))+\">\"+(_vm._ssrList((_vm.chunks),function(chunk){return (\"<div class=\\\"cube\\\"><div\"+(_vm._ssrClass(null,{\n            'uploading':chunk.progress>0&&chunk.progress<100,\n            'success':chunk.progress==100,\n            'error':chunk.progress<0\n          }))+(_vm._ssrStyle(null,{height:chunk.progress+'%'}, null))+\">\"+((chunk.progress<100 && chunk.progress>0)?(\"<i class=\\\"el-icon-loading\\\" style=\\\"color:#f56c6c\\\"></i>\"):\"<!---->\")+\"</div></div>\")}))+\"</div></div>\")],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport sparkMD5 from 'spark-md5'\nconst CHUNK_SIZE = 10*1024*1024\nexport default {\n  async mounted(){\n    const ret = await this.$http.get('/user/info')\n    this.bindEvents()\n  },\n  data(){\n    return {\n      file:null,\n      // uploadProgress:0,\n      hashProgress:0,\n      chunks:[]\n    }\n  },\n  computed:{\n    cubeWidth(){\n      return  Math.ceil(Math.sqrt(this.chunks.length))*16\n    },\n    uploadProgress(){\n      if(!this.file || this.chunks.length){\n        return 0\n      }\n      const loaded = this.chunks.map(item=>item.chunk.size*item.progress)\n                        .reduce((acc,cur)=>acc+cur,0)\n      return parseInt(((loaded*100)/this.file.size).toFixed(2))\n    }\n  },\n  methods:{\n    bindEvents(){\n      const drag = this.$refs.drag\n      drag.addEventListener('dragover',e=>{\n        drag.style.borderColor = 'red'\n        e.preventDefault()\n      })\n      drag.addEventListener('dragleave',e=>{\n        drag.style.borderColor = '#eee'\n        e.preventDefault()\n      })\n      drag.addEventListener('drop',e=>{\n        const fileList = e.dataTransfer.files\n        drag.style.borderColor = '#eee'\n        this.file = fileList[0]\n\n\n        e.preventDefault()\n\n        // const e.dataTrans\n      })\n    }, \n    async blobToString(blob){\n      return new Promise(resolve=>{\n        const reader = new FileReader()\n        reader.onload = function(){\n          console.log(reader.result)\n          const ret = reader.result.split('')\n                        .map(v=>v.charCodeAt())\n                        .map(v=>v.toString(16).toUpperCase())\n                        // .map(v=>v.padStart(2,'0'))\n                        .join('')\n          resolve(ret)\n          // const ret = reader.\n        }\n        reader.readAsBinaryString(blob)\n      })\n    } ,\n    async isGif(file){\n      // GIF89a 和GIF87a\n      // 前面6个16进制，'47 49 46 38 39 61' '47 49 46 38 37 61'\n      // 16进制的抓安环\n      const ret = await this.blobToString(file.slice(0,6))\n      const isGif = (ret=='47 49 46 38 39 61') || (ret=='47 49 46 38 37 61')\n      return isGif\n    },\n    async isPng(file){\n      const ret = await this.blobToString(file.slice(0,8))\n      const ispng = (ret == \"89 50 4E 47 0D 0A 1A 0A\")\n      return ispng\n    },\n    async isJpg(file){\n      const len = file.size\n      const start = await this.blobToString(file.slice(0,2))\n      const tail = await this.blobToString(file.slice(-2,len))\n      const isjpg = (start=='FF D8') && (tail=='FF D9')\n      return isjpg\n    },\n    async isImage(file){\n      // 通过文件流来判定\n      // 先判定是不是gif\n      return await this.isGif(file) || await this.isPng(file)\n    },\n    createFileChunk(file,size=CHUNK_SIZE){\n      const chunks = [] \n      let cur = 0\n      while(cur<this.file.size){\n        chunks.push({index:cur, file:this.file.slice(cur,cur+size)})\n        cur+=size\n      }\n      return chunks\n    },\n    async calculateHashWorker(){\n      return new Promise(resolve=>{\n        this.worker = new Worker('/hash.js')\n        this.worker.postMessage({chunks:this.chunks})\n        this.worker.onmessage = e=>{\n          const {progress,hash} = e.data\n          this.hashProgress = Number(progress.toFixed(2))\n          if(hash){\n            resolve(hash)\n          }\n        }\n      })\n    },\n\n    // 60fps\n    // 1秒渲染60次 渲染1次 1帧，大概16.6ms\n    // |帧(system task，render，script)空闲时间  |帧 painting idle   |帧   |帧   |\n    // 借鉴fiber架构\n    async calculateHashIdle(){\n      const chunks = this.chunks\n      return new Promise(resolve=>{\n        const spark = new sparkMD5.ArrayBuffer()\n        let count = 0 \n\n        const appendToSpark = async file=>{\n          return new Promise(resolve=>{\n            const reader = new FileReader()\n            reader.readAsArrayBuffer(file)\n            reader.onload = e=>{\n              spark.append(e.target.result)\n              resolve()\n            }\n          })\n        }\n        const workLoop = async deadline=>{\n          // timeRemaining获取当前帧的剩余时间\n          while(count<chunks.length && deadline.timeRemaining()>1){\n            // 空闲时间，且有任务\n            await appendToSpark(chunks[count].file)\n            count++\n            if(count<chunks.length){\n              this.hashProgress = Number(\n                ((100*count)/chunks.length).toFixed(2)\n              )\n            }else{\n              this.hashProgress = 100\n              resolve(spark.end())\n            }\n          }\n          window.requestIdleCallback(workLoop)\n        }\n        // 浏览器一旦空闲，就会调用workLoop\n        window.requestIdleCallback(workLoop)\n\n      })\n    },\n    async calculateHashSample(){\n\n      // 布隆过滤器  判断一个数据存在与否\n      // 1个G的文件，抽样后5M以内\n      // hash一样，文件不一定一样\n      // hash不一样，文件一定不一样\n      return new Promise(resolve=>{\n        const spark = new sparkMD5.ArrayBuffer()\n        const reader = new FileReader()\n\n        const file = this.file\n        const size = file.size\n        const offset = 2*1024*1024\n        // 第一个2M，最后一个区块数据全要\n        let chunks = [file.slice(0,offset)]\n\n        let cur = offset\n        while(cur<size){\n          if(cur+offset>=size){\n            // 最后一个区快\n            chunks.push(file.slice(cur, cur+offset))\n\n          }else{\n            // 中间的区块\n            const mid = cur+offset/2\n            const end = cur+offset\n            chunks.push(file.slice(cur, cur+2))\n            chunks.push(file.slice(mid, mid+2))\n            chunks.push(file.slice(end-2, end))\n          }\n          cur+=offset\n        }\n        // 中间的，取前中后各2各字节\n        reader.readAsArrayBuffer(new Blob(chunks))\n        reader.onload = e=>{\n          spark.append(e.target.result)\n          this.hashProgress = 100\n          resolve(spark.end())\n        }\n      })\n    },\n    async uploadFile(){\n\n      if(!this.file){\n        return \n      }\n\n\n\n      // console.log(this.file)\n      // if(!await this.isImage(this.file)){\n      //   console.log('文件格式不对')\n      // }else{\n      //   console.log('格式正确')\n      // }\n      const chunks = this.createFileChunk(this.file)\n      // const hash = await this.calculateHashWorker()\n      // const hash1 = await this.calculateHashIdle()\n      // console.log('文件hash',hash)\n      // console.log('文件hash1',hash1)\n      const hash = await this.calculateHashSample()\n      this.hash = hash\n\n      // 问一下后端，文件是否上传过，如果没有，是否有存在的切片\n      const {data:{uploaded, uploadedList}} = await this.$http.post('/checkfile',{\n        hash:this.hash,\n        ext:this.file.name.split('.').pop()\n      })\n      if(uploaded){\n        // 秒传\n        return this.$message.success('秒传成功')\n      }\n      // console.log('文件hash2',hash2)\n      // 两个hash配合\n      // 抽样hash 不算全量\n      // 布隆过滤器 损失一小部分的精度，换取效率\n      \n      this.chunks = chunks.map((chunk,index)=>{\n        // 切片的名字 hash+index\n        const name = hash +'-'+ index\n        return {\n          hash,\n          name,\n          index,\n          chunk:chunk.file,\n          // 设置进度条，已经上传的，设为100\n          progress:uploadedList.indexOf(name)>-1 ?100:0\n        }\n      })\n      await this.uploadChunks(uploadedList)\n\n    },\n    async uploadChunks(uploadedList=[]){\n      const requests = this.chunks\n        .filter(chunk=>uploadedList.indexOf(chunk.name)==-1)\n        .map((chunk,index)=>{\n          // 转成promise\n          const form = new FormData()\n          form.append('chunk',chunk.chunk)\n          form.append('hash',chunk.hash)\n          form.append('name',chunk.name)\n          // form.append('index',chunk.index)\n          return {form, index:chunk.index,error:0}\n        })\n        .map(({form,index})=> this.$http.post('/uploadfile',form,{\n          onUploadProgress:progress=>{\n            // 不是整体的进度条了，而是每个区块有自己的进度条，整体的进度条需要计算\n            this.chunks[index].progress = Number(((progress.loaded/progress.total)*100).toFixed(2))\n          }\n        }))\n      // @todo 并发量控制 \n      // 尝试申请tcp链接过多，也会造成卡顿\n      // 异步的并阿叔控制，\n      // await Promise.all(requests)\n\n      // await this.sendRequest(requests)\n      await Promise.all(requests)\n      await this.mergeRequest()\n      // const form = new FormData()\n      // form.append('name','file')\n      // form.append('file',this.file)\n      // const ret = await this.$http.post('/uploadfile',form,{\n      //   onUploadProgress:progress=>{\n      //     this.uploadProgress = Number(((progress.loaded/progress.total)*100).toFixed(2))\n      //   }\n      // })\n      // console.log(ret)\n\n    },\n    // TCP慢启动，先上传一个初始区块，比如10KB，根据上传成功时间，决定下一个区块仕20K，hi是50K，还是5K\n    // 在下一个一样的逻辑，可能编程100K，200K，或者2K\n    // 上传可能报错\n    // 报错之后，进度条变红，开始重试\n    // 一个切片重试失败三次，整体全部终止\n    async sendRequest(chunks,limit=4){\n      // limit仕并发数\n      // 一个数组,长度仕limit\n      // [task12,task13,task4]\n      return new Promise((resolve,reject)=>{\n        const len = chunks.length\n        let counter = 0 \n        let isStop = false\n        const start = async ()=>{\n          if(isStop){\n            return \n          }\n          const task = chunks.shift()\n          if(task){\n            const {form,index} = task\n\n            try{\n              await this.$http.post('/uploadfile',form,{\n                onUploadProgress:progress=>{\n                  // 不是整体的进度条了，而是每个区块有自己的进度条，整体的进度条需要计算\n                  this.chunks[index].progress = Number(((progress.loaded/progress.total)*100).toFixed(2))\n                }\n              })\n              if(counter==len-1){\n                // 最后一个任务\n                resolve()\n              }else{\n                counter++\n                // 启动下一个任务\n                start()\n              }\n            }catch(e){\n\n              this.chunks[index].progress = -1\n              if(task.error<3){\n                task.error++\n                chunks.unshift(task)\n                start()\n              }else{\n                // 错误三次\n                isStop = true\n                reject()\n              }\n            }\n          }\n        }\n\n        while(limit>0){\n          // 启动limit个任务\n          // 模拟一下延迟\n          setTimeout(()=>{\n            start()\n          },Math.random()*2000)\n          limit-=1\n        }\n      \n      })\n    },\n    async mergeRequest(){\n      const ret = await this.$http.post('/mergefile',{\n        ext:this.file.name.split('.').pop(),\n        size:CHUNK_SIZE,\n        hash:this.hash\n      })\n      const url = ret.data.url\n      await this.$http.put('/user/info',{url:\"/api\"+url})\n    },\n    handleFileChange(e){\n\n      const [file] = e.target.files\n      if(!file) return \n      this.file = file\n    }\n  }\n}\n","import mod from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./uc.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/babel-loader/lib/index.js??ref--2-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./uc.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./uc.vue?vue&type=template&id=3f40559b&\"\nimport script from \"./uc.vue?vue&type=script&lang=js&\"\nexport * from \"./uc.vue?vue&type=script&lang=js&\"\nfunction injectStyles (context) {\n  \n  var style0 = require(\"./uc.vue?vue&type=style&index=0&lang=stylus&\")\nif (style0.__inject__) style0.__inject__(context)\n\n}\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  injectStyles,\n  null,\n  \"0349a972\"\n  \n)\n\nexport default component.exports"],"mappings":";;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;ACVA;AAAA;AAAA;AAAA;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAZA;AAaxEA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}